* ET-312 Firmware Reverse Engineering
** Introduction
This document contains notes about the reverse engineering efforts
against the firmware of the ET-312B Electrostimulation Device,
including what is currently known about the firmware, and different
attack vectors. The goal is to provide an unencrypted version of the
ET-312B firmware that can be modified and upgraded.

This will hopefully be updated as progress continues, mainly so I
don't have to repeat myself over IRC/Twitter/Telegram/Etc.

There's also a good chance we're missing something obvious, so if you
see something here we've missed, please [[https://github.com/metafetish/erosoutsider/issues][file a github issue and let us
know!]]

** tl;dr Problem Summary

For those that are just curious what we're up to and what we're
running into:

We want an unencrypted version of the firmware for the ET-312B.

We have:

- An ET-312B Box
- 2 Firmware upgrade files for the box

These files are somehow obfuscated or encrypted, and the bootloader on
the ATMega16 undoes that encryption when we upload the firmware to the
chip. Due to fuses being set on the chip, we can't access the flash or
bootloader through JTAG or other hardware debugging methods. Due to
the chip being a harvard architecture, we can't screw with the stack
and inject instructions 'cause we don't have access to code space.
While we know that the flash will contain AVR assembly, strings, etc,
we aren't sure what order the upgrade file is in, or where those
things might be in it.

** What We Know Currently
*** System Specifics 
The ET-312B runs on an ATMega16A chip. There is no external
RAM/EEPROM/etc, everything exists in memory on the chip.

All fuses are set on the chip, locking out JTAG access or the ability
to read out the flash or bootloader.
*** Firmware Upgrade Files
**** Files
Two versions of the firmware, for v1.5 and v1.6, are available via the
firmware upgrade website:

[[http://blog.erostek.com/2012/08/27/et-312-firmware-upgrade-1/][http://blog.erostek.com/2012/08/27/et-312-firmware-upgrade-1/]]

These files (312-15.upg and 312-16.upg), are also available in the
[[http://github.com/metafetish/erosoutsider/][Erosoutsider Repo]].

**** Analysis and Assumptions
Some assumptions about the upgrade files:

- Neither file is just a flash image. They've been at least
  obfuscated, and possibly rearranged. Since we don't have access to
  the bootloader code, there's no telling what they could be. We just
  know that somewhere in here is the code to run the ET312.
- Both firmware files are 15872 bytes, which is 16384 - 512. Since the
  bootloader takes up 512 bytes of the Flash, there's a good chance
  the upgrade files could just be images of the rest of the flash.
- It is assumed that these files are encrypted via some sort of stream
  cipher, mainly due to the patterns that emerge when comparing them
  (see below). The serial protocol used a simple XOR cipher [[../doc/et312-protocol.org][(more
  information on this is available in the serial protocol
  documentation)]], so there's a chance this could be similarly simple.

*** Upload/Upgrade Process
To upgrade the firmware on the box, the upgrade file is simply
transferred via the [[https://en.wikipedia.org/wiki/XMODEM][XMODEM protocol]]. Full instructions for upgrading
are listed in the Reference section of this document.
** Methods
*** JTAG/Stack Smashing/Etc to Get At Flash
**** Basic Idea
Use either hardware debuggers or screwing with the stack in RAM to get
at the flash
**** Activity/Progress
Dead from the start.
**** Notes
JTAG or hardware debugging in general is dead from the start despite
there being a JTAG header on the board, due to the fuses being set.

Screwing with the stack doesn't do use much good because this is a
harvard architecture chip, so we can't really inject instructions in a
useful manner since all of the code sits in another address space
anyways. The best we might be able to do is play with return addresses
to figure out where things are in flash and try to match that to the
upgrade file in order to produce plaintext.

*** File Comparison/Analysis
**** Basic Idea
Armed with a spec sheet, knowledge of AVR assembly and binary tools,
pick at the upgrade files until either something makes sense or the
heat death of the universe consumes us all.
**** Activity/Progress
Still in progress, seems like one of the more likely ways to figure
this out.
**** Notes
While entropy tests run against the files using the [[https://www.phy.duke.edu/~rgb/General/dieharder.php][Dieharder Test
Suite]] show that the files themselves are fairly random, comparing the
files to each other shows some patterns. For instance, here is the
first 256 bytes of each file:

312-15.upg

#+BEGIN_SRC 
00000000: ed78 3723 9920 5637 af04 4e2b 4e73 9382  .x7#. V7..N+Ns..
00000010: 2984 f9ec 0ba5 a382 e9ad 4828 c45f 25e2  ).........H(._%.
00000020: d0f1 4359 35a3 f574 24e2 4b1c 6d1b b5e6  ..CY5..t$.K.m...
00000030: 53cc 5e99 d249 e453 c6b6 984d fc1e f530  S.^..I.S...M...0
00000040: ffe2 4f81 6d1f 75e4 57c0 5c95 124b e85f  ..O.m.u.W.\..K._
00000050: c4ba 984d bc39 6669 4774 deba 5b2a 6428  ...M.9fiGt..[*d(
00000060: 62d1 acab 92d2 1dbe 4d51 3132 00e0 a335  b.......MQ12...5
00000070: 81e0 a729 6ba3 b669 7dec 496e 903a 0129  ...)k..i}.In.:.)
00000080: c36b 46d3 08ba f630 f5b5 d899 9085 7d46  .kF....0......}F
00000090: c506 6a6c 12c7 0ac6 e14f 7fad 92de 86bf  ..jl.....O......
000000a0: 99bc d2df 10c5 9118 1888 b1da 64a6 36f0  ............d.6.
000000b0: 0509 2947 4f93 31cb 1895 6f31 360c df11  ..)GO.1...o16...
000000c0: 4869 33ee eabf 080a 143a dc99 5f79 0aef  Hi3......:.._y..
000000d0: 791d 2523 3c4c 96cf 2fb4 551f af73 fa7d  y.%#<L../.U..s.}
000000e0: 5395 0736 7734 1f92 846c cc8b 697e 2c43  S..6w4...l..i~,C
000000f0: 02ad 65ef aff1 f32b 71a3 2c58 4286 24a1  ..e....+q.,XB.$.
#+END_SRC

312-16.upg

#+BEGIN_SRC 
00000000: ed78 5f23 9948 5637 c704 4e43 4e73 9382  .x_#.HV7..NCNs..
00000010: 2984 11ec 0bfd 2582 31c5 4870 425f ed8a  ).....%.1.HpB_..
00000020: d0b9 4359 eda3 f52c 24e2 961c 6d44 d4e6  ..CY...,$...mD..
00000030: 8eda 36c2 b321 d145 aebd f925 f108 f53f  ..6..!.E...%...?
00000040: 9ee2 aa97 6d78 92e4 b2be 34fe f523 e521  ....mx....4..#.!
00000050: acb1 f925 b12f 0e62 261c d7ac 335d 0540  ...%./.b&...3].@
00000060: 97c7 d4dc f3aa 14a8 055e 507a 09f6 eb32  .........^Pz...2
00000070: e0a8 a23f 23a4 d721 44fa 0151 f172 383f  ...?#..!D..Q.r8?
00000080: 8b50 279b 2dac be17 94fd f98f d8aa 1c0e  .P'.-...........
00000090: e410 224f 738f 2bd0 a96c 1ee5 b3c8 ce9c  .."Os.+..l......
000000a0: f8f4 f3c9 58ea f050 319e f9ed 05ee 03e6  ....X..P1.......
000000b0: 4d3a 480f 7e85 79f8 79dd 5e27 7e3f be59  M:H.~.y.y.^'~?.Y
000000c0: 757f 7bcd 8bf7 251c 5c11 bdd1 766f 42c4  u.{...%.\...voB.
000000d0: 1855 0035 746b f787 0aa2 1d38 ce3b df6b  .U.5tk.....8.;.k
000000e0: 1bbe 667e 5e22 57b5 e524 e59d 2151 4d0b  ..f~^"W..$..!QM.
000000f0: 2fbb 2dc0 ceb9 de3d 398c 4d10 6f90 6c8a  /.-....=9.M.o.l.
#+END_SRC

However, XORing the two files together, interesting patterns emerge:

#+BEGIN_SRC 
00000000: 0000 6800 0068 0000 6800 0068 0000 0000  ..h..h..h..h....
00000010: 0000 e800 0058 8600 d868 0058 8600 c868  .....X...h.X...h
00000020: 0048 0000 d800 0058 0000 dd00 005f 6100  .H.....X....._a.
00000030: dd16 685b 6168 3516 680b 6168 0d16 000f  ..h[ah5.h.ah....
00000040: 6100 e516 0067 e700 e57e 686b e768 0d7e  a....g...~hk.h.~
00000050: 680b 6168 0d16 680b 6168 0916 6877 6168  h.ah..h.ah..hwah
00000060: f516 7877 6178 0916 480f 6148 0916 4807  ..xwax..H.aH..H.
00000070: 6148 0516 4807 6148 3916 483f 6148 3916  aH..H.aH9.H?aH9.
00000080: 483b 6148 2516 4827 6148 2116 482f 6148  H;aH%.H'aH!.H/aH
00000090: 2116 4823 6148 2116 4823 6148 2116 4823  !.H#aH!.H#aH!.H#
000000a0: 6148 2116 482f 6148 2916 4837 6148 3516  aH!.H/aH).H7aH5.
000000b0: 4833 6148 3116 4833 6148 3116 4833 6148  H3aH1.H3aH1.H3aH
000000c0: 3d16 4823 6148 2d16 482b 6148 2916 482b  =.H#aH-.H+aH).H+
000000d0: 6148 2516 4827 6148 2516 4827 6148 2516  aH%.H'aH%.H'aH%.
000000e0: 482b 6148 2916 4827 6148 2916 482f 6148  H+aH).H'aH).H/aH
000000f0: 2d16 482f 6148 2d16 482f 6148 2d16 482b  -.H/aH-.H/aH-.H+
#+END_SRC

If we format the XOR output into blocks of 6 bytes each, some
repetition starts to show up:

#+BEGIN_SRC 
6800 0068 0000
0000 6800 0068
0000 0000 0000
e800 0058 8600
d868 0058 8600
c868 0048 0000
d800 0058 0000
dd00 005f 6100
dd16 685b 6168
3516 680b 6168
0d16 000f 6100
e516 0067 e700
e57e 686b e768
0d7e 680b 6168
0d16 680b 6168
0916 6877 6168
f516 7877 6178
0916 480f 6148
0916 4807 6148
0516 4807 6148
3916 483f 6148
3916 483b 6148
2516 4827 6148
2116 482f 6148
2116 4823 6148
2116 4823 6148
2116 4823 6148
2116 482f 6148
2916 4837 6148
3516 4833 6148
3116 4833 6148
3116 4833 6148
3d16 4823 6148
2d16 482b 6148
2916 482b 6148
2516 4827 6148
2516 4827 6148
2516 482b 6148
2916 4827 6148
2916 482f 6148
2d16 482f 6148
2d16 482f 6148
2d16 482b 6148
#+END_SRC

*** Brute Force Writing
**** Basic Idea
More a mapping technique than an attack, but by changing every Nth
byte by a known value, we may be able to map parts of the upgrade file
as we see strings change in the UI on the box.

For instance, we can increase every 10th byte in a block of the
firmware by a value of 1. Assuming the firmware runs, we can watch for
misspelled/changed strings around the box UI.
**** Activity/Progress
Haven't started this yet, mainly because it's perilous at best. Flash
only has a certain number of guaranteed writes (yes it's in the 1000s
but let's assume we're really bad at this and also the fact that...),
and we've only got 1 box, so if that chip gets ruined before we figure
this out, we have a problem (and no warranty).
*** LED Signals during Firmware Upload
*** Chip Uncapping
** References
*** Upgrade Instructions
This is a copy of the text from the Eroslink ET-312 Upgrade Instructions PDF, available at

[[http://media.erostek.com.s3.amazonaws.com/support/312-16_firmware_upgrade.pdf][http://media.erostek.com.s3.amazonaws.com/support/312-16_firmware_upgrade.pdf]]

Firmware Upgrade Instructions: ET-312 Version 1.6
1. Connect the ErosLink cable to an unused Serial port on your PC.
2. With the ET-312 off, connect the ErosLink cable to the Link jack of the ET-312.
3. Go to the Start, Programs, Accessories, menu in Windows and find
   Hyperterminal. It may be under Communications depending on which
   version of windows you have.
4. When Hyperterminal starts, wait for the welcome screen to go away
   and then enter any name in the New Connection box such as "ET312"
   and click OK.
5. In the Connect To box, select the serial port used in Step 1 from
   the Connect Using pull down menu. This will usually be COM1 - COM4.
   Then click OK.
6. In the Properties box, select the following options: Bits per
   second=19200, Data bits=8, Parity=None, Stop bits=1, Flow
   control=None and click OK.
7. Hold down the Menu and Up buttons on the ET-312 at the same time,
   then turn on the ET-312 while keeping them held down. The display
   should be blank and the Ch A and Ch B LEDs should blink slowly. If
   the ET-312 powers up normally, you did not hold down the buttons
   correctly as try again.
8. In Hyperterminal you should see a string of "C" characters appear
   at about 1 per second. If you don't see anything or you see
   different characters, Hyperterminal is not configured correctly or
   there is a problem with the serial port. Shut down Hyperterminal
   and try again selecting other available COM ports and make sure the
   properties in Step 6 are correct.
9. When you see the string of "C" characters in Hyperterminal, select
   the Transfer menu and Send file. If you wait too long, you'll have
   to power the ET-312 off and try again (the LEDs will stop
   blinking).
10. In the Send File box, make sure you select Xmodem as the protocol
    (NOT Zmodem or 1k Xmodem).
11. After Xmodem is selected, enter or Browse to the filename of the
    new firmware. For example, the version 1.6 upgrade file is called
    "312-16.upg".
12. Click Send and the file transfer should begin. The Ch A and Ch B
    lights will flash randomly as the data is transferred to the
    ET-312. DO NOT interrupt this process in any way.
13. When the transfer is completed, the ET-312 will power up normally
    and the display should show the new version of the software. If
    anything goes wrong, try again starting over from Step 1. If you
    still can't make it work, contact ErosTek or SexTek for further
    assistance.
14. Once the transfer is complete, you can turn the ET-312 off, unplug
    the cable, and close Hyperterminal (you do not need to save the
    Hyperterminal session).
*** Serial Protocol
[[https://github.com/metafetish/erosoutsider/blob/master/doc/et312-protocol.org][Link to Serial Protocol Documentation]]
*** Strings
