* ET-232 Protocol Documentation
** Introduction

This document is a specification for the serial communications
protocol of the ET232 Electrostimulation box by Erostek. The protocol
was put together through information found around the internet. 

Note that the information in this document has yet to be tested, and
therefore may be incorrect in some places. If you find any issues,
please [[http://github.com/metafetish/erosoutsider/issues][file issues in our github repo]].
** Communication via Link Cable
Communicating with the ET-232 box happens via an RS-232 Connection to
the Link port of the box. The link cable consists of a 3.5mm TRS
(stereo audio) jack, going to some sort of computer connection, be it
Female DB-9 or a RS232-to-USB converter. The pin connections are as
follows:

- 3.5mm Tip <-> RX (DB-9 Pin 2)
- 3.5mm Ring <-> TX (DB-9 Pin 3)
- 3.5mm Sleeve <-> Ground (DB-9 Pin 5)

Serial connections are 19200/8/N/1, or:

- 19200 baud
- Data Bits: 8
- Stop Bits: 1
- Partity: None

To use the serial link on the ET-232, the cable must be plugged in
before the box is turned on, in order to complete the handshake
protocol. Otherwise, the jack will register as an audio input jack.
Similarly, to use the jack as audio once again, the box should be
turned off and back on first, in order to reestablish audio mode.
** Handshake
When the box is powered on, the ET-232 will send a single byte:

#+BEGIN_EXAMPLE
0xcc
#+END_EXAMPLE

Assuming this is transferred correctly, the box then listens for and
responds to commands. Unlike the ET-312, the ET-232 does not use an
encrypted protocol.

** Commands
*** Format
Commands consist:

- ASCII characters
- A 2-byte checksum _string_, meaning two ASCII uppercase characters
  representing one hex byte. The checksum is a sum of all the
  characters in the range from '0' (0x30) to 'Z' (0x90) in the string.
  All characters outside of this range are ignored for the purposes of
  the checksum. This would be output by using a "%02X" printf-style
  formatter, for instance.
- A "\r" character to end the command.

Valid commands will be acknowledged with the following string:

#+BEGIN_EXAMPLE
\n
#+END_EXAMPLE

If a command is unrecognized, or the checksum does not match, the
following string will be returned:

#+BEGIN_EXAMPLE
?\r\n
#+END_EXAMPLE

*** Commands

Commands work on a peek and poke basis, similar to the ET-312.

**** Read Byte

#+BEGIN_EXAMPLE

#+END_EXAMPLE
**** Write Byte

**** Unknown?

** Address Table
